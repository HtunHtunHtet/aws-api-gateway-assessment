AWSTemplateFormatVersion: '2010-09-09'
Description: API Gateway with Cognito Authentication and Two Lambda Integration

Parameters:

  # API Key for OpenWeather #
  OpenWeatherApiKey:
    Type: String
    Description: API key for OpenWeatherMap

Resources:

  ### Cognito User Pool and Client ###
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: MyUserPool
      AutoVerifiedAttributes:
        - email
      UsernameAttributes:
        - email

  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: MyUserPoolClient
      UserPoolId: !Ref CognitoUserPool
      GenerateSecret: false

  ### IAM Roles For Lambda Function ###
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                  - ssm:GetParameter
                Resource: '*'

  ### Lambdas ###

  # First lambda #
  Lambda1:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: WeatherLambda
      Handler: index.handler
      Runtime: nodejs18.x
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: my-api-assessment-bucket # Change to your bucket name
        S3Key: lambda1.zip
      Environment:
        Variables:
          OPENWEATHER_API_KEY: !Ref OpenWeatherApiKey

  # Second Lambda #
  Lambda2:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: ExchangeLambda
      Handler: lambda_function.lambda_handler
      Runtime: python3.11
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: my-api-assessment-bucket # Change to your bucket name
        S3Key: lambda2.zip

  ### API Gateway ###
  ApiGatewayRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: MySecuredApi

  WeatherResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      PathPart: weather
      RestApiId: !Ref ApiGatewayRestApi

  ExchangeResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      PathPart: exchange
      RestApiId: !Ref ApiGatewayRestApi

  ApiGatewayCognitoAuthorizer:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      Name: CognitoAuthorizer
      Type: COGNITO_USER_POOLS
      IdentitySource: method.request.header.Authorization
      RestApiId: !Ref ApiGatewayRestApi
      ProviderARNs:
        - !GetAtt CognitoUserPool.Arn

  WeatherMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref ApiGatewayCognitoAuthorizer
      HttpMethod: GET
      ResourceId: !Ref WeatherResource
      RestApiId: !Ref ApiGatewayRestApi
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Lambda1.Arn}/invocations
      MethodResponses:
        - StatusCode: 200

  ExchangeMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref ApiGatewayCognitoAuthorizer
      HttpMethod: GET
      ResourceId: !Ref ExchangeResource
      RestApiId: !Ref ApiGatewayRestApi
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Lambda2.Arn}/invocations
      MethodResponses:
        - StatusCode: 200

  Lambda1InvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref Lambda1
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}/*/GET/weather

  Lambda2InvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref Lambda2
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}/*/GET/exchange

  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - WeatherMethod
      - ExchangeMethod
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      StageName: prod

Outputs:
  ApiBaseUrl:
    Description: Base URL for the API Gateway
    Value: !Sub https://${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com/prod
